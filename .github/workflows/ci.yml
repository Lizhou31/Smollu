name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  # Unified Build & Test (C + Rust)
  build-test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        preset: [debug, release]
        include:
          - os: ubuntu-latest
            install-deps: sudo apt-get update && sudo apt-get install -y libcriterion-dev cmake pkg-config build-essential libgtk-3-dev ninja-build clang
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache LLVM Build
      uses: actions/cache@v3
      with:
        path: build/llvm-build
        key: ${{ runner.os }}-llvm-${{ hashFiles('external/llvm-project/.git/modules/llvm-project/HEAD') }}-${{ matrix.preset }}
        restore-keys: |
          ${{ runner.os }}-llvm-${{ hashFiles('external/llvm-project/.git/modules/llvm-project/HEAD') }}-
          ${{ runner.os }}-llvm-

    - name: Install Dependencies
      run: ${{ matrix.install-deps }}

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt, clippy

    - name: Configure CMake
      run: cmake --preset=${{ matrix.preset }}

    - name: Build Everything (C + Rust)
      run: cmake --build build

    - name: Run All Tests (C + Rust)
      working-directory: build
      run: ctest --verbose --output-on-failure

    - name: Clippy Check
      working-directory: emulator
      run: cargo clippy -- -D warnings

    - name: Format Check
      working-directory: emulator
      run: cargo fmt -- --check
